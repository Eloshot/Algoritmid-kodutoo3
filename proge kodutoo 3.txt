1.2 
    ajaline keerukus worse case on O(n) käime kõik ühe korra läbi,
    best case on O(1) kuna lõpetame peale esimest võrdlust, average case on O(n)
    ruumiline keerukus kuna ei jäta midagi meelde ega liiguda midagi ümber siis on ruumiline keerukus O(1)
                                                                                                                 
1.3 
    saa igal pool kasutada kuna on lihtne. ta on aga ebaefektiivne ,ega nähta väga mõtet. väikeste testide suures on hea.
    piiranguks on suurte listide juures võtab kaua aega.
        
         
2.2 
    binary search best case on O(1) ehk element on listi keskel kust lejab kohe. sama mis linear search
    binary search average case on O(log n) kuna ta iga samm ta lõikab pooleks vaadatavad elemendid.
    binary search average case on O(log n) kuna to jõuab sinna ikkagi kogu aeg lõigates listi pooleks.
            
             
võrdlus:
	väikeste hulkade juures on linear search ok aga suuremate suures kasvab lineaarselt.
	binary search on umbes sama hea väikeste hulkade juures aga kasvab aeglaselt(logaritmiliselt).

stenaarium:
	kui on sorteeritud list kus on 10 000 elementi ja on vaja leida 29 994 mis asub indeksil 7455 võtab linear läbib 7454 elementi et sinna jõuda
	binari search võtab log2(7455) = 12.864 mis on umbes 13 elementi labib. 


3.1
	jump search töötab sorteeritud järjendite korral. Ta hüppab üle indeksite kindla määratud sammude. 
	nt kui samm on 4 ja otsime element 55 järjendist [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
	siis hüpab 0-4 siis 4-8 , 8-12 , kuna indeksil 12 on element suurem kui 55 siis lähme tagasi indeksile 8 ja teeme lineaar otsingu.

pseudo kood 

Function jumpSearch(list, target):
    n = list pikkus
    jump = √n   

    prev = 0
    while array[min(jump, n)-1] < target:
        prev = jump
        jump += √n
        if prev >= n:
            return NOT_FOUND


    for i from prev to min(jump, n) - 1:
        if list[i] = target:
            return i 

jump search on linear search ja binary search vahepealne ta on parem kui linear aga halven kui binary.

3.3


Eeldagemaks, et andmeid talletatakse suurel ja järjestikulisel viisil, 
võib hüpikotsing olla kiirem kui lineaarne või binaarne otsing,
eriti olukordades, kus juhusliku juurdepääsu kulu on märkimisväärne. 
Kujutame ette suurt sorteeritud täisarvude massiivi, mille elemendid on salvestatud aeglasele välistalletusseadmele, 
näiteks kõvakettale. Kuna iga juhusliku juurdepääsu operatsioon võib olla kulukas, 
kasutades hüpikotsingut, saame teha suuri hüppeid ja seeläbi minimeerida vajalikke juhusliku juurdepääsu kordi. 
Binaarne otsing võiks olla liiga agressiivne ja tekitada rohkem juhusliku juurdepääsu kulusid, 
samas kui lineaarne otsing oleks aeglasem, kuna see kontrollib iga elementi järjestikku. 
Seega võib hüpikotsing selles stsenaariumis pakkuda efektiivset tasakaalu, 
vähendades juhusliku juurdepääsu kulusid võrreldes lineaarse otsinguga.

4.1

ternitary search töötab sarnaselt binary searchile, erinuvys tuleneb sellest et ternitary jagab sorteeritud massivi 3 mitte 2 nagu binary search.
pseudo kood oleks midagi sellist

function ternary_search(arr, left, right, target):
    if right >= left:
        mid1 = left + (right - left) // 3
        mid2 = mid1 + (right - left) // 3

        if arr[mid1] == target:
            return mid1
        if arr[mid2] == target:
            return mid2

        if target < arr[mid1]:
            return ternary_search(arr, left, mid1 - 1, target)
        elif target > arr[mid2]:
            return ternary_search(arr, mid2 + 1, right, target)
        else:
            return ternary_search(arr, mid1 + 1, mid2 - 1, target)
    return -1

4.2
Ternary Search'i aegkomplekssus on log₃n,samas kui Binary Search'i oma on log₂n. kuna binary search iga kord ei vaata enam poolt
listi aga tenary search ei vaata iga kord 1/3 osa listist.

4.3
binary searchist on parem aru saada ja see on enamasti kiirem ja kasutatakse rohkem.

5


võtame stenaariuniks sõna leidmine sõnaraamatust
kasutame siin binary search, kuna sõnaraamat on sorteeritud siis binary search kõige kiirem.
kuna sõnaraamatud on tavaliselt suured siis, optimeerimiseks saaksime jagada osadeks nt esi täht, esimesed kaks tähte ja rakendada binary searchi eraldi neile

Boonus ülesanne

fibonacci otsingu algortim kasutab fibonacci jada et jaotada massiv.
alguses võtame fibonacci jadas arvu mis on sama pikk kui jada või väikseim fibonacci arv mis on jadast suurem
jagada massiiv fibonacci elementide khal
võrrelda otsitavad elementi jagamise kohas oleva elemendiga
liikuda vasakule või paremale poole olenevalt võrdlusest.

fibonacci otsingu algortim on hea kui on suur masiiv kus esineb lünki ehk on
palju kordusi või suured tühikud. fibonacci algortim suudab kiiresti tuvastada millises osas masiivis otsitav element asub




	

























